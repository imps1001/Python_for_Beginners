-->Lists are used to store multiple items in a single variable.
-->Lists are created using square brackets:

thislist = ["red", "green", "yellow"]
print(thislist)

 --> List items are ordered, changeable, and allow duplicate values.
 --> List items are indexed, the first item has index [0], the second item has index [1] etc..
 --> When we say that lists are ordered, it means that the items have a defined order, and that order will not change.
 --> Python lists are mutable, meaning they can be changed unlike strings which  cannot be altered once defined.
 --> Since lists are indexed, lists can have items with the same value:

thislist = ["red", "green", "blue", "yellow", "green"]
print(thislist)
print(thislist[0])
thislist[2] = "3"
print(thislist[2])

 --> Use the `len()` function to determine how many items a list has (or length).
 --> A list can contain different data types:
 --> From Python's perspective, lists are defined as objects with the data type 'list'

thislist = ["red", "1", "cherry"]
print(len(thislist))
print(type(thislist))

--> It is also possible to use the list() constructor when creating a new list.
thislist = list(("apple", "banana", "cherry"))

--> Access Items - thislist[2]
--> Negative Indexing -
    Negative indexing means start from the end
    -1 refers to the last item, -2 refers to the second last item etc.
--> Range - print(thislist[2:5]); print(thislist[:4]); print(thislist[2:])
          - print(thislist[-4:-1]) ; 

--> To determine if a specified item is present in a list use the in keyword:
thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

--> Change List Items
fruit_list = ['apple', 'banana']
fruit_list[0] = 'grapes' 
print(fruit_list)

--> Change a Range of Item values
fruit_list = ['apple', 'banana', 'cherry', 'mango', 'kiwi']
fruit_list[1:3] = ['grape', 'guava']
print(fruit_list)

--> Remove an item using del keyword
fruit_list = ['apple', 'banana', 'cherry', 'mango', 'kiwi']
del fruit_list[1]
print(fruit_list)


--> ADD List Items

Fuctions available-
append() - To add an item to the end of the list, use the append() method
insert() - To insert a list item at a specified index, use the insert() method.
extend() - To append elements from another list to the current list, use the extend() method.
            The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).


--> REMOVE List Items

Fuctions available-
remove() - The remove() method removes the specified item. (First Occurence)
pop() - The pop() method removes the specified index. (By default last item)
del() - The del keyword also removes the specified index- del thislist[1]
        The del keyword can also delete the list completely.
clear() - The clear() method empties the list.
          The list still remains, but it has no content.        


--> Traverse through the List

- You can loop through the list items by using a for loop:
    thislist = ["apple", "banana", "cherry"]
    for x in thislist:
        print(x)

-You can also loop through the list items by referring to their index number.
-Use the range() and len() functions to create a suitable iterable.
    thislist = ["apple", "banana", "cherry"]
    for i in range(len(thislist)):
        print(thislist[i])

- You can loop through the list items by using a while loop.

- List Comprehension offers the shortest syntax for looping through lists:
        thislist = ["apple", "banana", "cherry"]
        [print(x) for x in thislist]

--> List Comprehension

- List comprehension offers a shorter syntax when you want to create a new list based on the 
values of an existing list.
- Example:
Based on a list of fruits, you want a new list, containing only the fruits with the letter 
"a" in the name.
Without list comprehension you will have to write a for statement with a conditional test 
inside:

--With list comprehension you can do all that with only one line of code:

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in fruits if "a" in x]
print(newlist)

--> Syntax 
- newlist = [expression for item in iterable if condition == True]

- The expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list:
- The condition is like a filter that only accepts the items that valuate to True.
- If there's no condition, then all elements are included.
   newlist = [x.upper() for x in fruits]
   newlist = ['hello' for x in fruits]
   newlist = [x if x != "banana" else "orange" for x in fruits]

--> Sort Lists

- Sort List Alphanumerically
List objects have a sort() method that will sort the list alphanumerically, ascending, 
by default:

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)

thislist = [100, 50, 65, 82, 23]
thislist.sort(reverse = True)
print(thislist)

-->Copy List

- You cannot copy a list simply by typing list2 = list1, because: list2 will only be a 
reference to list1, and changes made in list1 will automatically also be made in list2.

- There are ways to make a copy, one way is to use the built-in List method copy().
    thislist = ["apple", "banana", "cherry"]
    mylist = thislist.copy()
    print(mylist)

- Another way to make a copy is to use the built-in method list().
    thislist = ["apple", "banana", "cherry"]
    mylist = list(thislist)
    print(mylist)

--> Join Lists

- There are several ways to join, or concatenate, two or more lists in Python.
- One of the easiest ways are by using the + operator.

    list1 = ["a", "b", "c"]
    list2 = [1, 2, 3]
    list3 = list1 + list2
    print(list3)

- Another way to join two lists is by appending all the items from list2 into 
list1, one by one:

    list1 = ["a", "b" , "c"]
    list2 = [1, 2, 3]
    for x in list2:
     list1.append(x)
    print(list1)

- Or you can use the extend() method, where the purpose is to add elements from one list 
to another list:
     list1 = ["a", "b" , "c"]
     list2 = [1, 2, 3]
     list1.extend(list2)
     print(list1)